import { deploy, checkPublicABI, bigNum } from './support/helpers'
import { assertBigNum } from './support/matchers'

contract('Coordinator', () => {
  const sourcePath = 'Coordinator.sol'
  let coordinator

  beforeEach(async () => {
    coordinator = await deploy(sourcePath)
  })

  //   it('has a limited public interface', () => {
  //     checkPublicABI(artifacts.require(sourcePath), [
  //       'getId',
  //       'initiateServiceAgreement',
  //       'serviceAgreements'
  //     ])
  //   })

  //   describe('#getId', () => {
  //     it('matches the ID generated by the oracle off-chain', async () => {
  //       let result = await coordinator.getId.call(
  //         1,
  //         2,
  //         ['0x70AEc4B9CFFA7b55C0711b82DD719049d615E21d', '0xd26114cd6EE289AccF82350c8d8487fedB8A0C07'],
  //         '0x85820c5ec619a1f517ee6cfeff545ec0ca1a90206e1a38c47f016d4137e801dd'
  //       )
  //       assert.equal(result, '0x2249a9e0a0463724551b2980299a16406da6f4e80d911628ee77445be4e04e7c')
  //     })
  //   })

  describe('#initiateServiceAgreement', () => {
    it('saves a service agreement struct from the parameters', async () => {
      let oracles = [
        '0x9CA9d2D5E04012C9Ed24C0e513C9bfAa4A2dD77f',
      ]
      //let signatures = [
        //'0x65d773d0c12657bdd9a136e8d21116d7816de4dcc3c8f00be783fac6d7670603274b45cdf310fd9f249d13f0020a551e520fbe5c9fad34ae607b8f673a54789b00'
        // '0xb7'
      //]
      let vs = ['0xb7']
      let rs = ['0xa987222fc36c4c8ed1b91264867a422769998aadbeeb1c697586a04fa2b61602']
      let ss = ['0x5b5ca936ec5bdb150999e298b6ecf09251d3c4dd1306dedec0692e7037584800']
      let requestDigest = '0x126b1bc415a0fea64618d500d36ea390230fc9ea82f217d8f06c80ae024d19ba' // SAID
      await coordinator.initiateServiceAgreement(1, 2, oracles, vs, rs, ss, requestDigest)

      let sa = await coordinator.serviceAgreements.call(
        '0x2249a9e0a0463724551b2980299a16406da6f4e80d911628ee77445be4e04e7c'
      )

      assertBigNum(sa[0], bigNum(1))
      assertBigNum(sa[1], bigNum(2))
      assert.equal(
        sa[2],
        '0x85820c5ec619a1f517ee6cfeff545ec0ca1a90206e1a38c47f016d4137e801dd'
      )
      // TODO:
      // Web3.js doesn't support generating an artifact for arrays within a struct.
      // This means that we aren't returned the list of oracles and
      // can't assert on their values.
      //
      // However, we can pass them into the function to generate the ID
      // & solidity won't compile unless we pass the correct number and
      // type of params when initializing the ServiceAgreement struct,
      // so we have some indirect test coverage.
      //
      // https://github.com/ethereum/web3.js/issues/1241
      // assert.equal(
      //   sa[2],
      //   ['0x70AEc4B9CFFA7b55C0711b82DD719049d615E21d', '0xd26114cd6EE289AccF82350c8d8487fedB8A0C07']
      // )
    })
  })
})
